// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Edwards.Scada.Test.Framework.TestCases.Feature
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ModbusTests")]
    public partial class ModbusTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ModbusTests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ModbusTests", "This test checks that EdCentra supports communication with the CSK, Ebara drypump" +
                    "s over Modbus", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
testRunner.Given("I opened EDCENTRA app url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
testRunner.When("I entered \'administrator\' and \'toolkit\' and clicked login button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
testRunner.Then("Change the User Preference", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CSK Forest Abatement Support")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        [NUnit.Framework.TestCaseAttribute("#1 Drain Time (s)", "1 Second", "1 Second", "1", "#1 Chamber Pressure (Pa)", "1 Second", "1 Second", "1", null)]
        public virtual void CSKForestAbatementSupport(string parameter, string timeIntervalforNormal, string timeIntervalforAlert, string timeIntervalforDelta, string parameter1, string timeIntervalforNormal1, string timeIntervalforAlert1, string timeIntervalforDelta1, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CSK Forest Abatement Support", null, @__tags);
#line 10
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 11
testRunner.When("Run modbus simulator up, and set num ports to \"1\" Click the Start button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
testRunner.Then("open file dialog shows, choose the \'CSK_Forest.rgr\' file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 13
testRunner.When("I clicked Device Explorer link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
testRunner.Then("I should be navigated to Device Explorer page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 15
testRunner.When("I clicked on add folder/ system icon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
testRunner.And("I Entered folder name and Clicked on Add button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
testRunner.Then("I should be able to see Folder Added Successfully message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
testRunner.When("I clicked OK button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
testRunner.Then("I should be able to see newly added folder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 20
testRunner.When("I clicked Find Equipment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
testRunner.And("deleted all equipments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
testRunner.And("I commissioned device with following details \'iForest Abatement\', \'502\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
testRunner.When("Open the device in Device explorer to show device SEV screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
testRunner.Then("Some analogue parameters such as Water Tank Flow  Inlet Pressure Oxidzer Flow Rat" +
                    "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
testRunner.When("Change \'Holding Register\' \'113\' to \'15000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
testRunner.Then("Make sure that the parameter \'#1-1 Inlet Pressure\' changes to \'15000 Pa\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 27
testRunner.When("Change \'Holding Register\' \'102\' to \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
testRunner.Then("The device running status should go to \'Stand By\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 29
testRunner.When("Change \'Holding Register\' \'102\' to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
testRunner.Then("The device running status should go to \'Running\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
testRunner.When("Change \'Holding Register\' \'108\' to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
testRunner.Then("A warning \'W_#1-1 Inlet Pressure High\' should be raised on parameter \'#1 Warning " +
                    "Ch 1 (9)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 33
testRunner.When("Change \'Holding Register\' \'105\' to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
testRunner.Then("One alarm \'A_#1 Water Leak\' on parameter \'#1 Emergency (6)\' should be raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 35
testRunner.When("Change the \'Holding Registers\' \'108\' and \'105\' to \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
testRunner.Then("The warning and alarm alerts should clear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
testRunner.When("In the Modbus simulator, uncheck the box `FC 03 (Read Holding Registers)`", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
testRunner.Then("This should cease communication between the agent and simulator,device should go " +
                    "to \'No Communication\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
testRunner.When("Re-check the `FC 03` checkbox", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
testRunner.Then("Communication should be re-established \'Running\'.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
testRunner.When("I Within the [Configure \\/] menu, click the Logging option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
testRunner.Then("the Logging tab is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 43
testRunner.When("I Click on Create Profile button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
testRunner.Then("the Create Profile form is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
testRunner.When("Provide a name\'LoggingTest\' and select an equipment type\'iForest Abatement\' for t" +
                    "he profile. Click Create.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
testRunner.When(string.Format("I Make a number of selections from the list of available parameters and change th" +
                        "e values for the Normal, Alert, and Delta \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\' \'{5}\' \'{" +
                        "6}\' \'{7}\'.Then Click Apply.", parameter, timeIntervalforNormal, timeIntervalforAlert, timeIntervalforDelta, parameter1, timeIntervalforNormal1, timeIntervalforAlert1, timeIntervalforDelta1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
testRunner.Then(string.Format("The screen will show applied values for Normal / Alert and Delta fields for the p" +
                        "arameter.The screen will only list parameters\'{0}\' added in profile", parameter), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Ebara DryPump support")]
        [NUnit.Framework.TestCaseAttribute("MP Power (W)", "1 Second", "1 Second", "1", "BP Power (W)", "1 Second", "1 Second", "1", null)]
        public virtual void EbaraDryPumpSupport(string parameter, string timeIntervalforNormal, string timeIntervalforAlert, string timeIntervalforDelta, string parameter1, string timeIntervalforNormal1, string timeIntervalforAlert1, string timeIntervalforDelta1, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ebara DryPump support", null, exampleTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 53
testRunner.When("Run modbus simulator up, and set num ports to \"2\" Click the Start button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
testRunner.Then("open file dialog shows, choose the \'Ebara.rgr\' file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 55
testRunner.When("I clicked Device Explorer link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
testRunner.Then("I should be navigated to Device Explorer page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 57
testRunner.When("I clicked on add folder/ system icon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
testRunner.And("I Entered folder name and Clicked on Add button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
testRunner.Then("I should be able to see Folder Added Successfully message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 60
testRunner.When("I clicked OK button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 61
testRunner.Then("I should be able to see newly added folder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 62
testRunner.When("I clicked Find Equipment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
testRunner.And("deleted all equipments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
testRunner.And("I commissioned device with following details \'Ebara VOS Series Drypump\', \'502\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
testRunner.When("Open the device in Device explorer to show device SEV screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
testRunner.Then("Some analogue parameters such as BP Power Pump N2 Flow BP Status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
testRunner.When("Change \'Holding Register\' \'102\' to \'110\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
testRunner.Then("Make sure that parameter \'BP Power \'changes to \'110 W\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 69
testRunner.When("Change \'Holding Register\' \'134\' to \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
testRunner.Then("The device running status should go to \'Stopped\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
testRunner.When("Change \'Holding Register\' \'134\' to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 72
testRunner.Then("The device running status should go to \'Running\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 73
testRunner.When("Change \'Holding Register\' \'205\' to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
testRunner.Then("A warning \'Casing temp. high\' should be raised on parameter \'MP Casing Temperatur" +
                    "e (9)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 75
testRunner.When("Change \'Holding Register\' \'205\' to \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
testRunner.Then("The warning should clear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 77
testRunner.When("Change \'Holding Register\' \'250\' to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
testRunner.Then("One alarm \'Casing temp. HH\' on parameter \'MP Casing Temperature (9)\' should be ra" +
                    "ised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 79
testRunner.When("Change \'Holding Register\' \'250\' to \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
testRunner.Then("The alarm alerts should clear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 81
testRunner.When("In the Modbus simulator, uncheck the box `FC 03 (Read Holding Registers)`", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
testRunner.Then("This should cease communication between the agent and simulator,device should go " +
                    "to \'No Communication\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 83
testRunner.When("Re-check the `FC 03` checkbox", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
testRunner.Then("Communication should be re-established \'Running\'.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 85
testRunner.When("I Within the [Configure \\/] menu, click the Logging option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 86
testRunner.Then("the Logging tab is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 87
testRunner.When("I Click on Create Profile button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
testRunner.Then("the Create Profile form is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 89
testRunner.When("Provide a name\'LoggingTest\' and select an equipment type\'Ebara VOS Series Drypump" +
                    "\' for the profile. Click Create.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 90
testRunner.When(string.Format("I Make a number of selections from the list of available parameters and change th" +
                        "e values for the Normal, Alert, and Delta \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\' \'{5}\' \'{" +
                        "6}\' \'{7}\'.Then Click Apply.", parameter, timeIntervalforNormal, timeIntervalforAlert, timeIntervalforDelta, parameter1, timeIntervalforNormal1, timeIntervalforAlert1, timeIntervalforDelta1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
testRunner.Then(string.Format("The screen will show applied values for Normal / Alert and Delta fields for the p" +
                        "arameter.The screen will only list parameters\'{0}\' added in profile", parameter), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Support Edwards I/O Controller (Type 2b) over Modbus TCP")]
        [NUnit.Framework.TestCaseAttribute("DigitalInput3", "30 Seconds", "30 Seconds", "1", "DigitalInput2", "30 Seconds", "30 Seconds", "1", "DigitalInput1", "30 Seconds", "30 Seconds", "1", null)]
        public virtual void SupportEdwardsIOControllerType2BOverModbusTCP(string parameter, string timeIntervalforNormal, string timeIntervalforAlert, string timeIntervalforDelta, string parameter1, string timeIntervalforNormal1, string timeIntervalforAlert1, string timeIntervalforDelta1, string parameter2, string timeIntervalforNormal2, string timeIntervalforAlert2, string timeIntervalforDelta2, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Support Edwards I/O Controller (Type 2b) over Modbus TCP", null, exampleTags);
#line 97
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 98
testRunner.When("Run modbus simulator up, and set num ports to \"2\" Click the Start button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
testRunner.Then("open file dialog shows, choose the \'edwardsiocontroller_registers.rgr\' file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 100
testRunner.When("I clicked Device Explorer link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 101
testRunner.Then("I should be navigated to Device Explorer page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 102
testRunner.When("I clicked on add folder/ system icon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
testRunner.And("I Entered folder name and Clicked on Add button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
testRunner.Then("I should be able to see Folder Added Successfully message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 105
testRunner.When("I clicked OK button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
testRunner.Then("I should be able to see newly added folder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 107
testRunner.When("I clicked Find Equipment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
testRunner.And("deleted all equipments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
testRunner.And("I commissioned device with following details \'Edwards IO Controller\', \'502\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
testRunner.When("Open the device in Device explorer to show device SEV screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 111
testRunner.Then("Change to \'Input Register\' \'1\' to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 112
testRunner.Then("Make sure some data comes through. Some digital outs, and analogue parameters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 113
testRunner.When("Add needed parameter \'DigitalInput1\' \'AnalogueInput1\' Before changing the Input r" +
                    "egister", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 114
testRunner.When("Change \'Input Register\' \'199\' to \'110\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 115
testRunner.Then("Make sure the parameter \'AnalogueInput\' changes to \'110\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 116
testRunner.When("Change \'Input Register\' \'1\' to \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 117
testRunner.Then("The device running status should go to \'Off\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 118
testRunner.When("Change \'Input Register\' \'1\' to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 119
testRunner.Then("The device running status should go to \'Running\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 120
testRunner.When("In the Modbus simulator, uncheck the boxes activate FC checkboxes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 121
testRunner.Then("This should cease communication between the agent and simulator,device should go " +
                    "to \'No Communication\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 122
testRunner.When("Re-check the FC checkboxes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
testRunner.Then("Communication should be re-established \'Running\'.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 124
testRunner.When("Provide a name\'LoggingTest\' and select an equipment type\'Edwards IO Controller\' f" +
                    "or the profile. Click Create.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 125
testRunner.When(string.Format("Finally, create a logging profile for an Edwards IO Controller, logging parameter" +
                        "s \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\' \'{5}\' \'{6}\' \'{7}\' \'{8}\' \'{9}\' \'{10}\' \'{11}\'.Then" +
                        " Click Apply.", parameter, timeIntervalforNormal, timeIntervalforAlert, timeIntervalforDelta, parameter1, timeIntervalforNormal1, timeIntervalforAlert1, timeIntervalforDelta1, parameter2, timeIntervalforNormal2, timeIntervalforAlert2, timeIntervalforDelta2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 126
testRunner.Then(string.Format("The screen will show applied values for Normal / Alert and Delta fields for the p" +
                        "arameter.The screen will only list parameters\'{0}\' added in profile", parameter), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Agent changes to support IO controller alerts per system")]
        public virtual void AgentChangesToSupportIOControllerAlertsPerSystem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Agent changes to support IO controller alerts per system", null, ((string[])(null)));
#line 132
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 133
testRunner.When("Run modbus simulator up, and set num ports to \"2\" Click the Start button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 134
testRunner.Then("open file dialog shows, choose the \'edwardsiocontroller_registers.rgr\' file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 135
testRunner.When("I clicked Device Explorer link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 136
testRunner.Then("I should be navigated to Device Explorer page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 137
testRunner.When("I clicked on add folder/ system icon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 138
testRunner.And("I Entered folder name and Clicked on Add button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
testRunner.Then("I should be able to see Folder Added Successfully message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 140
testRunner.When("I clicked OK button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 141
testRunner.Then("I should be able to see newly added folder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 142
testRunner.When("I clicked Find Equipment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
testRunner.And("deleted all equipments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
testRunner.And("I commissioned device with following details \'Edwards IO Controller\', \'502\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
testRunner.When("Open the device in Device explorer to show device SEV screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 146
testRunner.When("Go to the Configure -> Edwards IO Controller Settings section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 147
testRunner.Then("Page loads and shows Create new profile dialog if there are no existing profiles", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 148
testRunner.When("New dialog is not showing if there are existing profiles then click the New butto" +
                    "n, enter a unique name \'ControllerProfile\' and click the create button.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 149
testRunner.Then("Profile is created and shown - you can see the details with tabs: Parameters, Fun" +
                    "ctions, Alerts and assignments.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 150
testRunner.When("Now go to the parameters tab, and scroll down to \'DigitalInput1\'. Click the check" +
                    "box", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 151
testRunner.Then("Edit textbox appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 152
testRunner.When("Enter \'Digi1\' as the name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 153
testRunner.When("scroll down to \'DigitalInput2\'. Click the checkbox", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 154
testRunner.Then("Edit textbox appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 155
testRunner.When("I Enter \'Digi2\' as the name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 156
testRunner.When("Click Apply", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 157
testRunner.Then("Parameter\'DigitalInput1\' renames \'Digi1\' are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 158
testRunner.When("move to the alerts tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 159
testRunner.Then("Alert tab opens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Alert",
                        "AlertMessage"});
            table1.AddRow(new string[] {
                        "Function1_Boolean_Output",
                        "Major Alarm",
                        "Digi1OrDigi2"});
#line 160
testRunner.When("the dropdown list select Click the Add button at the end of the row", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Alert",
                        "AlertMessage"});
            table2.AddRow(new string[] {
                        "Function1_Boolean_Output",
                        "Major Alarm",
                        "Digi1OrDigi2"});
#line 163
testRunner.Then("Alert is added to the profile", ((string)(null)), table2, "Then ");
#line 166
testRunner.When("Now move to the assignments tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 167
testRunner.Then("Assignments tab opens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 168
testRunner.When("Click find equipment, and select the IO Controller you are using in this test. Se" +
                    "lect the device in the left hand pane, and click the > button to move it to the " +
                    "right pane. Click Apply", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 169
testRunner.Then("No errors are shown. Wait a minute or so for the profile to apply to the equipmen" +
                    "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 170
testRunner.When("Now, in the Modbus simulator application, on the left hand pane, select Coils and" +
                    " scroll down to register \'299\'.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 171
testRunner.And("Double click on the red False text, to change it to green True", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
testRunner.When("Go to live alerts list, and open the alert just raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 173
testRunner.Then("You can see a red alarm with message \'Digi1OrDigi2\' on parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 174
testRunner.When("Back to the Modbus simulator application, on the left hand pane, select Coils and" +
                    " scroll down to register \'299\'.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 175
testRunner.And("Double click on the green True text, to change it to a red False.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
testRunner.Then("the previous major alarm should be cleared.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

